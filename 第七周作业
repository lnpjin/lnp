第六周作业
李能鹏 地测学院 地理信息科学 2020904207
本周学习第二阶段有关于二分查找法的算法，以及对二分查找法的变种的分析。
二分查找法只针对有序序列，对于其他查找算法而言，有一定局限性，但由于其时间复杂度是Ο(logn)级别的，所以对于多次查找而言，总体上其时间复杂度还是Ο(logn)级别的，其具有相当大的优势。
二分查找算法可由递归实现，也可由循环来实现，且多种变种可以用来进行针对性的数据查找，返回所期望的索引。

二分查找法
template <class T>
class BinarySearch
{
public:
	//递归实现二分查找
	int search(T* data, int length, T target) {
		int l = 0, r = length - 1;
		while (l <= r) {
			int mid = l + (r - l) / 2;
			if (data[mid] == target)
				return mid;
			if (data[mid] < target)
				l = mid + 1;
			else
				r = mid - 1;
		}
		return -1;
	}
	//递归实现二分查找
	int searchR(T* data,int length,T target){
		return search(data,0,length-1,target);
	}
	//大于target的最小值索引
	int upper(T* data,int length, T target) {
		int l = 0, r = length;
	    //在data[l,r]中寻找解
	    while (l < r) {
		int mid = l + (r - l) / 2;
		if (data[mid] <= target)
			l = mid + 1;
		else
			r = mid;
	    }
	    return l;
	}
	//大于target,返回最小值索引
	//等于target,返回最大值索引
	int ceil(T* data,int length,T target) {
		int u = upper(data, length, target);
		if (u - 1 >= 0 && data[u - 1 == target])
			return u - 1;
		return u;
	}
	//大于等于target的最小值索引
	int lower_ceil(T* data, int length, T target) {
		int l = 0, r = length;
		//在data[l,r]中寻找解
		while (l < r) {
			int mid = l + (r - l) / 2;
			if (data[mid] < target)
				l = mid + 1;
			else
				r = mid;
		}
		return l;
	}
	//小于target的最大值索引
	int lower(T* data, int length, T target) {
		int l = 0, r = length - 1;
		//在data[l,r]中寻找解
		while (l < r) {
			int mid = l + (r - l + 1) / 2;
			if (data[mid] < target)
				l = mid;
			else
				r = mid - 1;
		}
		return l;
	}
private:
	int sezrchR(T* data,int l,int r,T target) {
		if (l > r)
			return -1;
		int mid = l + (r - l) / 2;
		if (data[mid] == target)
			return mid;
		if (data[mid] < target)
			return search(data, mid + 1, r, target);
		return search(data, l, mid - 1, target);
	}
};
