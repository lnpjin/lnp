第十二周作业
李能鹏
本周学习线段树、Trie、并查集。
线段树：
线段树是一种二叉搜索树（即每个节点最多有两颗子树），与区间树相似，它将一个区间划分成一些单元区间，每个单元区间对应线段树中的一个叶结点。
Trie：

建立Trie
根据输入字符串的顺序，若字符串的前缀已经存在于字典树中，则沿着对应的子树搜索，直到不匹配。不匹配时，新建节点插入字典树，不断循环，直到结束，将对应tag置为true表示这是一个存放在字典树中的单词
搜索
根据输入字符串的顺序，一次搜索，若字符串的前缀已经存在于字典树中，则沿着对应的子树搜索，若出现不匹配则返回false，否则返回tag，若tag为true则表示欲搜索的字符串是字典树Trie中存放的单词，否则表示存在一个字符串的前缀是欲搜索的这个字符串，但字典树Trie不存在这个单词
character数组
存放的是字典树Trie当前结点的孩子节点所在的层的索引（层数，二维数组行标），其所有的孩子节点都该层中，数组的下标则对应相应的字符，根节点不对应任何字符
并查集：
在一些应用问题中，需要将n个不同的元素划分成一些不相交的集合。开始时，每个元素自成一个单元素集合，然后按一定的规律将归于同一组元素的集合合并。在此过程中要反复用到查询某一个元素归属于那个集合的运算。适合于描述这类问题的抽象数据类型称为并查集。
//线段树
#include<iostream>
#include<cstdio>
#include<cmath>
#include<algorithm>
#include<map>
#include<vector>
#include<string>
#include<cstring>
#include<queue>
using namespace std;
inline int read()
{
    int num=0,w=1;
    char ch=getchar();
    while(ch<'0'||ch>'9') {if(ch=='-') w=-1;ch=getchar();}
    while(ch>='0'&&ch<='9') {num=(num<<1)+(num<<3)+ch-'0';ch=getchar();}
    return num*w;
}
int n;
int a[4000001];
int sum[4000001];
int add[4000001];
inline  void build(int k,int l,int r)
{ 
	if(l==r)
    {
        sum[k]=a[l];
        return;
    }
	int mid=(l+r)>>1;
	build(k*2,l,mid);
	build(k*2+1,mid+1,r);
	sum[k]=sum[k*2]+sum[k*2+1];
	return;
}
inline int find_spot(int k,int l,int r,int x)
{
	if(l==r) return sum[k];
	int mid=(l+r)>>1;
	if(x<=mid) return find_spot(k*2,l,mid,x);
	else  return find_spot(k*2+1,mid+1,r,x);
} 
inline void change_spot(int k,int l,int r,int x)
{
	if(l==r) 
	{
		sum[k]+=x;
		return;
	}
	int mid=(l+r)>>1;
	if(x<=mid) change_spot(k*2,l,mid,x);
	else change_spot(k*2+1,mid+1,r,x);
	sum[k]=sum[k*2]+sum[k*2+1];
	return;
}
inline void Add(int k,int l,int r,int v)
{
	add[k]+=v;
	sum[k]+=v*(r-l+1);
	return;
}
inline void pushdown(int k,int l,int r)
{
	if(!add[k]) return;
	int mid=(l+r)>>1;
	Add(k*2,l,mid,add[k]);
	Add(k*2+1,mid+1,r,add[k]);
	add[k]=0;
	return;
}
inline int find_section(int k,int l,int r,int x,int y)
{
	if(x<=l&&r<=y) return sum[k];
	int mid=(l+r)>>1;
	int res=0;
	pushdown(k,l,r);
	if(x<=mid) res+=find_section(k*2,l,mid,x,y);
	if(y>mid) res+=find_section(k*2+1,mid+1,r,x,y);
	return res;
}
inline void change_section(int k,int l,int r,int x,int y,int v)
{
	if(x<=l&&r<=y)
	{
		Add(k,l,r,v);
		return;
	}
	pushdown(k,l,r);
	int mid=(l+r)>>1;
	if(x<=mid) change_section(k*2,l,mid,x,y,v);
	if(y>mid) change_section(k*2+1,mid+1,r,x,y,v);
	sum[k]=sum[k*2]+sum[k*2+1];
	return;
}
int main()
{
	//freopen(".in","r",stdin);
	//freopen(".out","w",stdout);
	
	//一些奇奇怪怪的初始化、读入、输出、离散化…… 
	
	//fclose(stdin);
	//fclose(stdout);		
	return 0;
}


//Trie
#include<bits/stdc++.h>
using namespace std;

class Trie {
private:
    static const int MAX_SIZE = 1024;
    static const int SIGMA_SIZE = 26;
    int character[MAX_SIZE][SIGMA_SIZE];
    bool tag[MAX_SIZE];
    int size;
    int index(char c);
public:
    Trie();
    void insert(string str);
    bool search(string str);
};

Trie::Trie() {
    size = 1;
    memset(character[0], 0, sizeof(character[0]));
}

int Trie::index(char c) {
    return c - 'a';
}

void Trie::insert(string str) {
    int currentLevel = 0;
    for (int i = 0; i < str.size(); i++) {
        int c = index(str[i]);
        if (!character[currentLevel][c]) {
        	// 将新建节点的下一层清零， 若之后存在以当前已搜寻字符串子串公共前缀的可以迅速建立孩子节点，该层用于存放其所有孩子节点
            memset(character[size], 0, sizeof(character[size]));
            tag[size] = false;
            // 新建节点
            character[currentLevel][c] = size++;
        }
        // 跳转到其孩子节点所在的层搜寻
        currentLevel = character[currentLevel][c];
    }
    // 标记当前为结尾的字符串为字典树的一个单词
    tag[currentLevel] = true;
}

bool Trie::search(string str) {
    int currentLevel = 0;
    for (int i = 0; i < str.size(); i++) {
        int c = index(str[i]);
        if (!character[currentLevel][c]) {
        	// 若字符没有索引，则说明与搜索字符串不存在
            return false;
        }
        currentLevel = character[currentLevel][c];
    }
    //若对应tag为true则表示欲搜索的字符串是字典树Trie中存放的单词，否则表示存在一个字符串的前缀是欲搜索的这个字符串，但字典树Trie不存在这个单词
    return tag[currentLevel];
}

int main(int argc, char const *argv[])
{
    string str;
    Trie trie;
    while (cin >> str) {
        trie.insert(str);
        cin >> str;
        printf("%s\n", trie.search(str) ? "Exist" : "Not found");
    }
    return 0;
}


//并查集
#include<iostream>
#include<vector>
#include<assert.h>
using namespace std;
class UnionFindSet
{
public:
	UnionFindSet(size_t n)
	{
		_ufs.resize(n, -1);
	}
	//将x2合并到x1
	void Union(int x1, int x2)
	{
		assert(x1 < _ufs.size());
		assert(x2 < _ufs.size());
		//找到它们的根，然后将其中一个根与另一个根相连
		int root1 = FindRoot(x1);
		int root2 = FindRoot(x2);
		if (root1 != root2)
		{
			_ufs[root1] += _ufs[root2];
			_ufs[root2] = root1;
		}
	}
	int FindRoot(int x)
	{
		assert(x < _ufs.size());
		while (_ufs[x] >= 0)
		{
			x = _ufs[x];
		}
		return x;
	}
	//获取有几个集合，也就是根的数量
	//根对应的值为负数
	int GetSize()
	{
		int n = 0;
		for (auto& e : _ufs)
		{
			if (e < 0)
			{
				n++;
			}
		}
		return n;
	}
private:
	vector<int> _ufs;
};
