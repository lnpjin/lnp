第十周作业
李能鹏
本周学习堆和优先队列。
1.堆是一颗完全二叉树，用数组实现。
2.堆中存储数据的数据是局部有序的。
最大堆：1.任意一个结点存储的值都大于或等于其任意一个子结点中存储的值。
     2.根结点存储着该树所有结点中的最大值。
最小堆：1.任意一个结点存储的值都小于或等于其惹你一个子结点存储的值。
     2.根结点存储着该树所有结点中的最小值。
无论最小堆还是最大堆，任何一个结点与其兄弟结点之间都没有必然联系。
优先队列（堆）满足先进先出，而且每次出队的都是队列中最小的（也可以是最大的，看实现过程）。
堆是一棵完全二叉树，所以优先队列一般用二叉堆实现。

堆和优先队列
//Heap.h
#include<iostream>
using namespace std;
template<typename E> 
class Maxheap {
private:
    E* Heap;    //堆序列的指针
    int maxsize;   //堆的最大容量
    int n;      //堆里面的元素数量

    //将元素放在它应在的位置
    void siftdown(int pos)
    {
        while (!isLeaf(pos))
        {
            int j = leftchild(pos);
            int rc = rightchild(pos);
            if ((rc < n) && prior(Heap[rc], Heap[j]))
                j = rc;
            if (prior(Heap[pos], Heap[j]))    return;
            swap(Heap, pos, j);
            pos = j;
        }
    }
public:

    //构造函数
    heap(E* h, int num, int max)
    {
        Heap = h; n = num; maxsize = max;
        buildHeap();
    }
    //返回堆的大小
    int size() const
    {
        return n;
    }
    //判断是否为叶节点
    bool isLeaf(int pos) const
    {
        return (pos >= n / 2) && (pos < n);
    }
    //返回左节点
    int leftchild(int pos) const
    {
        return 2 * pos + 1;
    }
    //返回右节点
    int rightchild(int pos) const
    {
        return 2 * pos + 2;
    }
    //返回父节点
    int parent(int pos) const
    {
        return (pos - 1) / 2;
    }
    //建堆
    void buildHeap()
    {
        for (int i = n / 2 - 1; i >= 0; i--) siftdown(i);
    }
    //插入一个元素
    void insert(const E& it)
    {
        assert(n < maxsize, "Heap is full");
        int curr = n++;
        Heap[curr] = it;
        while ((curr != 0) && (prior(Heap[curr], Heap[parent(curr)])))
        {
            swap(Heap, curr, parent(curr));
            curr = parent(curr);
        }
    }
    //移除根节点
    E removefirst()
    {
        assert(n > 0, "Heap is empty");
        swap(Heap, 0, --n);
        if (n != 0)siftdown(0);
        return Heap[n];
    }
    //移除任意一个元素
    E remove(int pos)
    {
        assert((pos >= 0) && (pos < n), "Bad position");
        if (pos == (n - 1)) n--;
        else
        {
            swap(Heap, pos, --n);
            while ((pos) != 0 && (prior(Heap[pos], Heap[parent(pos)])))
            {
                swap(Heap, pos, parent(pos));
                pos = parent(pos);
            }
            if (n != 0) siftdown(pos);
        }
        return Heap[n];
    }
    //判断第一个参数是否再第二个参数之前
    bool prior(E a, E b)
    {

        if (a > b)   return true;
        else return false;
    }
    //交换值
    void swap(E* heap, int i, int j)
    {
        E temp;
        temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }
    //打印
    void print()
    {
        for (int i = 0; i < n; i++)
        {
            cout << Heap[i] << " ";
        }
        cout << endl << endl;
    }
};



class MinHeap
{
public:
    MinHeap(int size);
    ~MinHeap();
    void Insert(int number);//最小堆插入元素
    void Delete();//最小堆删除元素
    void swap(int& a, int& b) { int temp = a; a = b; b = temp; }//交换元素
    int GetNum() { return count - 1; }//获取最小堆元素个数
    void printHeap();//打印堆元素
    friend void sort(MinHeap& minheap, int* res, int n);//最小堆排序,res是排序后的数组指针

private:
    int* p;//数组指针
    int count;//最小堆元素数量
    int maxsize;//最小堆的最大元素数量
};

MinHeap::MinHeap(int size)
{
    maxsize = size;
    p = new int[maxsize + 1];
    if (p == nullptr) { cout << "内存分配失败！" << endl; exit(-1); }
    count = 1;
}

MinHeap::~MinHeap()
{
    if (p != nullptr) delete[] p;
}

//最小堆插入元素
void MinHeap::Insert(int number)
{
    if (count > maxsize) {
        cout << "内存不足，请重新分配空间" << endl;
        return;
    }
    //插入元素
    p[count] = number;
    //获取当前下标
    int curCount = count;
    //节点上浮
    while (curCount / 2)
    {
        //如果子节点比父节点小，交换节点值，即上浮
        if (p[curCount] < p[curCount / 2])
            swap(p[curCount], p[curCount / 2]);
        //更新当前结点坐标值
        curCount /= 2;
    }
    count++;
}

//最小堆删除元素
void MinHeap::Delete()
{
    int curCount = 1;
    int num = GetNum();//获取最小堆元素总数
    p[curCount] = p[num];//删除根结点元素，并将其替换为尾部元素
    p[num] = 0;
    //下降操作
    //当子节点存在时
    while (2 * curCount <= num - 1)
    {
        //如果左子节点存在且父节点大于左子节点
        if (p[curCount] > p[2 * curCount])
            swap(p[curCount], p[2 * curCount]);
        //如果右子节点存在且父节点大于右子节点
        if (2 * curCount + 1 <= num - 1 && p[curCount] > p[2 * curCount + 1])
            swap(p[curCount], p[2 * curCount + 1]);
        //更新当前结点坐标值
        curCount *= 2;
    }
    count--;
}

void MinHeap::printHeap()
{
    cout << "开始打印：";
    for (int i = 1; i < count; ++i)
        cout << p[i] << " ";
    cout << endl;
}

//最小堆排序
void sort(MinHeap& minheap, int res[], int n)
{
    //res = new int[minheap.count - 1];
    int index = minheap.count;
    for (int i = 0; i < n; i++)
    {
        int curCount = 1;
        int num = index - 1;//获取最小堆元素总数
        res[i] = minheap.p[curCount];
        minheap.p[curCount] = minheap.p[num];//删除根结点元素，并将其替换为尾部元素
        //下降操作,当子节点存在时
        while (2 * curCount <= num - 1)
        {
            //如果左子节点存在且父节点大于左子节点
            if (minheap.p[curCount] > minheap.p[2 * curCount])
                swap(minheap.p[curCount], minheap.p[2 * curCount]);
            //如果右子节点存在且父节点大于右子节点
            if (2 * curCount + 1 <= num - 1 && minheap.p[curCount] > minheap.p[2 * curCount + 1])
                swap(minheap.p[curCount], minheap.p[2 * curCount + 1]);
            //更新当前结点坐标值
            curCount *= 2;
        }
        index--;
    }
}



//PriorityQueue.h
template<class T>
class PriorityQueue
{
private:
    int Capacity = 100;    //队列容量
    int size;                 //队列大小
    T* data;             //队列变量

public:
    PriorityQueue();
    ~PriorityQueue();

    int Size();
    bool Full();   //判满
    bool Empty(); //判空
    void Push(T key); //入队
    void Pop();//出队
    void Clear(); //清空
    T Top();//队首
};

template<class T>
PriorityQueue<T>::PriorityQueue()
{
    data = (T*)malloc((Capacity + 1) * sizeof(T));
    if (!data)
    {
        perror("Allocate dynamic memory");
        return;
    }

    size = 0;
}

template<class T>
PriorityQueue<T>::~PriorityQueue()
{
    while (!Empty())
        Pop();
}

template<class T>
//判空
bool PriorityQueue<T>::Empty()
{
    if (size > 0)
        return false;
    return true;
}

template<class T>
//清空
void PriorityQueue<T>::Clear()
{
    while (!Empty())
        Pop();
}

template<class T>
//判满
bool PriorityQueue<T>::Full()
{
    if (size == Capacity)
        return true;
    return false;
}

template<class T>
//大小
int PriorityQueue<T>::Size()
{
    return size;
}

template<class T>
//入队
void PriorityQueue<T>::Push(T key)
{
    // 空则直接入队  不能省略
    if (Empty())
    {
        data[++size] = key;
        return;
    }

    int i;

    if (Full())
    {
        perror("Priority queue is full\n");
        return;
    }

    for (i = ++size; data[i / 2] > key; i /= 2)
        data[i] = data[i / 2];
    data[i] = key;

    //if (key != data[i / 2])          //如果不能插入重复值 用下面的
    //  data[i] = key;
    //else
    //{
    //  size--;
    //  perror("Same value");
    //}

}

template<class T>
//出队
void PriorityQueue<T>::Pop()
{
    int i, child;
    T min, last;

    if (Empty())
    {
        perror("Empty queue\n");
        return;
    }

    min = data[1];
    last = data[size--];

    for (i = 1; i * 2 <= size; i = child)
    {
        child = i * 2;
        if (child != size && data[child + 1] < data[child])
            child++;

        if (last > data[child])
            data[i] = data[child];
        else
            break;
    }
    data[i] = last;
}

template<class T>
//队首
T PriorityQueue<T>::Top()
{
    if (Empty())
    {
        perror("Priority queue is full\n");
        return data[0];
    }
    return data[1];
}
